@page "/"
@using BlazorFrontEnd.Models
@inject IHttpClientFactory ClientFactory;

@rendermode RenderMode.InteractiveServer

<PageTitle>Сотрудники</PageTitle>

<div class="container-fluid">
    <div class="column">
        <div class="col">
    <h1 class="text-center">Список сотрудников</h1>
    <table class="table table-bordered table-striped table-sm">
        <thead>
            <tr>
                <th>Id</th>
                <th>Имя</th>
            </tr>
        </thead>
        <tbody>
            @foreach(GuestService c in guests)
            {
                <tr>
                    <td>@c.IdGuest</td>
                    <td>@c.Username</td>
                    <td>
                        <a class="btn btn-primary" @onclick="()=>Edit(c)">Изменить</a>
                        <a class="btn btn-primary" @onclick="@(async ()=>await Delete(c.IdGuest))">Удалить</a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

 <div class="col">
    <EditForm Model="@guest" OnSubmit="Submit">
                <DataAnnotationsValidator />
                <ValidationSummary />
    <p>
        Имя:<br />
                    <InputText @bind-Value="guest.Username" class="form-control" />
                    <ValidationMessage For="@(() => guest.Username)" />
    </p>
                <button class="btn btn-primary" type="submit">Отправить</button>
                <button class="btn btn-primary" type="reset" onclick="Reset">Очистить</button>
    </EditForm>
        </div>  
    </div>
</div>
@code{
    List<GuestService> guests=[];
    GuestService guest=new();
    HttpClient httpClient=new HttpClient();

    void Edit(GuestService p)
    {
        guest.IdGuest = p.IdGuest;
        guest.Username = p.Username;
    }
    protected override async Task OnInitializedAsync(){
        httpClient = ClientFactory.CreateClient();
        httpClient.BaseAddress = new Uri("https://localhost:7043/api/guest");
        await LoadData();
    }
    async Task LoadData(){
        guests = await httpClient.GetFromJsonAsync<List<GuestService>>
        (httpClient.BaseAddress)??guests;
    }
    async Task Submit(){
        if (guest.IdGuest == 0)
            await httpClient.PostAsJsonAsync(httpClient.BaseAddress, guest);
        else
            await httpClient.PutAsJsonAsync(httpClient.BaseAddress, guest);
        guest.IdGuest = 0;
        guest.Username = "";
        await LoadData();
    }
    void Reset()
    {
        guest.IdGuest = 0;
    }
   
    async Task Delete(int id){
        await httpClient.DeleteAsync($"{httpClient.BaseAddress}/{id}");
        await LoadData();
    }
}
